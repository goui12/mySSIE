/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mysiexperience;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;

/**
 *
 * @author z004kptc
 */
public class PWSL extends javax.swing.JFrame {

    //private javax.swing.JTextArea txaHazard;
    //Variable containing the default save folder//
    private static final String DEFAULT_SAVE_FOLDER = System.getProperty("user.home") + File.separator + "Documents" + File.separator + "MySIExperience" + File.separator + "PWSL_Templates";
    private MyConfiguration configuration;
    private static final String CONFIG_FILE_PATH = System.getProperty("user.home") + File.separator
            + "Documents" + File.separator + "MySIExperience" + File.separator + "Configuration" + File.separator
            + "hazardconfiguration.xml";
    private String wordCount;

    public String getWordCount() {
        loadWordCount();
        return this.wordCount;
    }

    private void loadWordCount() {
        new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() {
                try {
                    File configFile = new File(CONFIG_FILE_PATH);
                    if (!configFile.exists()) {
                        System.out.println("Configuration file doesn't exist.");
                        return null;
                    }

                    JAXBContext context = JAXBContext.newInstance(MyConfiguration.class);
                    Unmarshaller unmarshaller = context.createUnmarshaller();
                    MyConfiguration configuration = (MyConfiguration) unmarshaller.unmarshal(configFile);
                    System.out.println("Configuration loaded successfully.");
                    wordCount = String.valueOf(configuration.getWordCount());
                } catch (JAXBException ex) {
                    System.out.println("Error loading configuration: " + ex.getMessage());
                    JOptionPane.showMessageDialog(PWSL.this, "Error loading configuration: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
                return null;
            }

            @Override
            protected void done() {
                System.out.println("Word count loaded: " + wordCount);
            }
        }.execute();
    }

    /**
     * Creates new form PWSL
     */
    public PWSL() {
        System.out.println("Initializing components...");
        initComponents();
        System.out.println("Components initialized.");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgWork = new javax.swing.ButtonGroup();
        btgPPE = new javax.swing.ButtonGroup();
        btgSafety = new javax.swing.ButtonGroup();
        pnlHazard = new javax.swing.JPanel();
        lblPWSL7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        cbStorm = new javax.swing.JCheckBox();
        cbHot = new javax.swing.JCheckBox();
        cbConfined = new javax.swing.JCheckBox();
        cbCorrections = new javax.swing.JCheckBox();
        cbCut = new javax.swing.JCheckBox();
        cbDriving = new javax.swing.JCheckBox();
        cbDust = new javax.swing.JCheckBox();
        cbErgonomics = new javax.swing.JCheckBox();
        cbElectrical = new javax.swing.JCheckBox();
        cbEyeStrain = new javax.swing.JCheckBox();
        cbLifts = new javax.swing.JCheckBox();
        cbLadders = new javax.swing.JCheckBox();
        cbRoofs = new javax.swing.JCheckBox();
        cbFlying = new javax.swing.JCheckBox();
        cbMetal = new javax.swing.JCheckBox();
        cbHand = new javax.swing.JCheckBox();
        cbHousekeeping = new javax.swing.JCheckBox();
        cbInfection = new javax.swing.JCheckBox();
        cbLighting = new javax.swing.JCheckBox();
        cbRepeat = new javax.swing.JCheckBox();
        cbNoise = new javax.swing.JCheckBox();
        cbNewSite = new javax.swing.JCheckBox();
        cbPowerTools = new javax.swing.JCheckBox();
        cbSlip = new javax.swing.JCheckBox();
        cbTrench = new javax.swing.JCheckBox();
        cbCold = new javax.swing.JCheckBox();
        cbInsects = new javax.swing.JCheckBox();
        cbAlone = new javax.swing.JCheckBox();
        cbTrip = new javax.swing.JCheckBox();
        cbHeavy = new javax.swing.JCheckBox();
        pnlEquip = new javax.swing.JPanel();
        txfEquip = new javax.swing.JTextField();
        txfTask = new javax.swing.JTextField();
        lblPWSL5 = new javax.swing.JLabel();
        lblPWSL6 = new javax.swing.JLabel();
        lblUnique = new javax.swing.JLabel();
        txfUnique = new javax.swing.JTextField();
        pnlName = new javax.swing.JPanel();
        lblPWSL1 = new javax.swing.JLabel();
        lblPWSL3 = new javax.swing.JLabel();
        lblPWSL4 = new javax.swing.JLabel();
        txfCust = new javax.swing.JTextField();
        txfEmp = new javax.swing.JTextField();
        rdOnSiteYes = new javax.swing.JRadioButton();
        rdOnSiteNo = new javax.swing.JRadioButton();
        pnlCbn = new javax.swing.JPanel();
        lblPWSL16 = new javax.swing.JLabel();
        cbFrantic = new javax.swing.JCheckBox();
        cbEasy = new javax.swing.JCheckBox();
        cbFaster = new javax.swing.JCheckBox();
        cbNormal = new javax.swing.JCheckBox();
        cbSlow = new javax.swing.JCheckBox();
        pnlRun = new javax.swing.JPanel();
        btnSchedule = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnSubmit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txfRepeat = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnSchedule1 = new javax.swing.JButton();
        pnlGPT = new javax.swing.JPanel();
        lblPWSL2 = new javax.swing.JLabel();
        spHazard = new javax.swing.JScrollPane();
        txaHazard = new javax.swing.JTextArea();
        btnSuggestion = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnConfig = new javax.swing.JButton();
        txtInfo = new javax.swing.JLabel();
        pnlTools = new javax.swing.JPanel();
        txfNeeds = new javax.swing.JTextField();
        lblPWSL10 = new javax.swing.JLabel();
        lblPWSL8 = new javax.swing.JLabel();
        txfTools = new javax.swing.JTextField();
        pnlPPE = new javax.swing.JPanel();
        lblPWSL13 = new javax.swing.JLabel();
        lblPWSL14 = new javax.swing.JLabel();
        rbPPEYes = new javax.swing.JRadioButton();
        rbPPENo = new javax.swing.JRadioButton();
        rbSafetyYes = new javax.swing.JRadioButton();
        rbSafetyNo = new javax.swing.JRadioButton();
        pnlMoreHazards = new javax.swing.JPanel();
        cbExposed = new javax.swing.JCheckBox();
        cbHotWork = new javax.swing.JCheckBox();
        cbSiemensLadder = new javax.swing.JCheckBox();
        cbConfinedSpace = new javax.swing.JCheckBox();
        cbInLift = new javax.swing.JCheckBox();
        cbNone = new javax.swing.JCheckBox();
        mnbPWSL = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mniLoad = new javax.swing.JMenuItem();
        mniSave = new javax.swing.JMenuItem();
        mnuEdit = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("PWSL Editor: New PWSL");
        setAutoRequestFocus(false);
        setFocusable(false);
        setLocation(new java.awt.Point(200, 50));
        setResizable(false);

        pnlHazard.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblPWSL7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPWSL7.setText("Hazards that apply:");

        jScrollPane1.setToolTipText("");

        cbStorm.setText("Weather Storm");
        cbStorm.setNextFocusableComponent(cbInsects);
        cbStorm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbStormActionPerformed(evt);
            }
        });

        cbHot.setText("Weather Hot");
        cbHot.setNextFocusableComponent(cbCold);
        cbHot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbHotActionPerformed(evt);
            }
        });

        cbConfined.setText("Confined Space");
        cbConfined.setNextFocusableComponent(cbCorrections);
        cbConfined.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbConfinedActionPerformed(evt);
            }
        });

        cbCorrections.setText("Corrections Facility");
        cbCorrections.setNextFocusableComponent(cbCut);

        cbCut.setText("Cut Hazards");
        cbCut.setNextFocusableComponent(cbDriving);

        cbDriving.setText("Driving");
        cbDriving.setNextFocusableComponent(cbDust);

        cbDust.setText("Dust");
        cbDust.setNextFocusableComponent(cbElectrical);

        cbErgonomics.setText("Ergonomics");
        cbErgonomics.setNextFocusableComponent(cbEyeStrain);

        cbElectrical.setText("Electrical");
        cbElectrical.setNextFocusableComponent(cbErgonomics);

        cbEyeStrain.setText("Eye  Strain");
        cbEyeStrain.setNextFocusableComponent(cbLadders);

        cbLifts.setText("Falls Lifts");
        cbLifts.setNextFocusableComponent(cbRoofs);

        cbLadders.setText("Falls Ladders");
        cbLadders.setNextFocusableComponent(cbLifts);

        cbRoofs.setText("Falls Rooftops");
        cbRoofs.setNextFocusableComponent(cbFlying);

        cbFlying.setText("Flying Particles");
        cbFlying.setNextFocusableComponent(cbHand);

        cbMetal.setText("Metal Work");
        cbMetal.setNextFocusableComponent(cbHousekeeping);

        cbHand.setText("Hand Tools");
        cbHand.setNextFocusableComponent(cbMetal);

        cbHousekeeping.setText("Housekeeping");
        cbHousekeeping.setNextFocusableComponent(cbInfection);

        cbInfection.setText("Infectious Disease");
        cbInfection.setNextFocusableComponent(cbLighting);
        cbInfection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbInfectionActionPerformed(evt);
            }
        });

        cbLighting.setText("Lighting");
        cbLighting.setNextFocusableComponent(cbHeavy);
        cbLighting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbLightingActionPerformed(evt);
            }
        });

        cbRepeat.setText("Carrying Repetitively");
        cbRepeat.setNextFocusableComponent(cbNoise);
        cbRepeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRepeatActionPerformed(evt);
            }
        });

        cbNoise.setText("Loud Noises");
        cbNoise.setNextFocusableComponent(cbNewSite);
        cbNoise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbNoiseActionPerformed(evt);
            }
        });

        cbNewSite.setText("New Site");
        cbNewSite.setNextFocusableComponent(cbPowerTools);
        cbNewSite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbNewSiteActionPerformed(evt);
            }
        });

        cbPowerTools.setText("Power Tools");
        cbPowerTools.setNextFocusableComponent(cbSlip);
        cbPowerTools.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPowerToolsActionPerformed(evt);
            }
        });

        cbSlip.setText("Slip Hazards");
        cbSlip.setNextFocusableComponent(cbTrench);
        cbSlip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSlipActionPerformed(evt);
            }
        });

        cbTrench.setText("Trenching Excavation");
        cbTrench.setNextFocusableComponent(cbTrip);
        cbTrench.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTrenchActionPerformed(evt);
            }
        });

        cbCold.setText("Weather Cold");
        cbCold.setNextFocusableComponent(cbStorm);
        cbCold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbColdActionPerformed(evt);
            }
        });

        cbInsects.setText("Wildlife Insects");
        cbInsects.setNextFocusableComponent(cbAlone);
        cbInsects.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbInsectsActionPerformed(evt);
            }
        });

        cbAlone.setText("Working Alone");
        cbAlone.setNextFocusableComponent(btnConfig);
        cbAlone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAloneActionPerformed(evt);
            }
        });

        cbTrip.setText("Trip Hazards");
        cbTrip.setNextFocusableComponent(cbHot);
        cbTrip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTripActionPerformed(evt);
            }
        });

        cbHeavy.setText("Carrying Heavy Objects");
        cbHeavy.setNextFocusableComponent(cbRepeat);
        cbHeavy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbHeavyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbCorrections)
                    .addComponent(cbCut)
                    .addComponent(cbConfined)
                    .addComponent(cbDust)
                    .addComponent(cbElectrical)
                    .addComponent(cbDriving)
                    .addComponent(cbRepeat)
                    .addComponent(cbLifts)
                    .addComponent(cbLadders)
                    .addComponent(cbErgonomics)
                    .addComponent(cbEyeStrain)
                    .addComponent(cbInsects)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbInfection)
                            .addComponent(cbHousekeeping))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addComponent(cbFlying)
                            .addGap(17, 17, 17))
                        .addComponent(cbHand)
                        .addComponent(cbRoofs))
                    .addComponent(cbLighting)
                    .addComponent(cbNoise)
                    .addComponent(cbMetal)
                    .addComponent(cbNewSite)
                    .addComponent(cbPowerTools)
                    .addComponent(cbTrip)
                    .addComponent(cbTrench)
                    .addComponent(cbCold)
                    .addComponent(cbHot)
                    .addComponent(cbStorm)
                    .addComponent(cbAlone)
                    .addComponent(cbSlip)
                    .addComponent(cbHeavy)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbHeavy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbRepeat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbConfined)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbCorrections)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbCut)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbDriving)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbDust)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbElectrical)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbErgonomics)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbEyeStrain)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbLifts)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbLadders)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbRoofs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbFlying)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbHand)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbHousekeeping)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbInfection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbLighting)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbNoise)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbMetal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbNewSite)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbPowerTools)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbSlip)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbTrip)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbTrench)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbCold)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbHot)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbStorm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbInsects)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbAlone)
                .addContainerGap(82, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel2);

        jScrollPane1.getVerticalScrollBar().setUnitIncrement(16);
        jScrollPane1.getVerticalScrollBar().setBlockIncrement(64);

        javax.swing.GroupLayout pnlHazardLayout = new javax.swing.GroupLayout(pnlHazard);
        pnlHazard.setLayout(pnlHazardLayout);
        pnlHazardLayout.setHorizontalGroup(
            pnlHazardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHazardLayout.createSequentialGroup()
                .addComponent(lblPWSL7, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(pnlHazardLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        pnlHazardLayout.setVerticalGroup(
            pnlHazardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHazardLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPWSL7, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jScrollPane1.getAccessibleContext().setAccessibleName("");

        pnlEquip.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txfEquip.setNextFocusableComponent(txfTask);

        txfTask.setNextFocusableComponent(cbConfined);
        txfTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfTaskActionPerformed(evt);
            }
        });

        lblPWSL5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblPWSL5.setText("Equipment being worked on:");
        lblPWSL5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblPWSL6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblPWSL6.setText("Tasks being performed:");
        lblPWSL6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblUnique.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblUnique.setText("Unique Circumstances:");

        txfUnique.setText("No");
        txfUnique.setNextFocusableComponent(cbExposed);

        javax.swing.GroupLayout pnlEquipLayout = new javax.swing.GroupLayout(pnlEquip);
        pnlEquip.setLayout(pnlEquipLayout);
        pnlEquipLayout.setHorizontalGroup(
            pnlEquipLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEquipLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEquipLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEquipLayout.createSequentialGroup()
                        .addComponent(lblPWSL5, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txfEquip, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlEquipLayout.createSequentialGroup()
                        .addGroup(pnlEquipLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblPWSL6, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(lblUnique, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlEquipLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txfTask, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                            .addComponent(txfUnique))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlEquipLayout.setVerticalGroup(
            pnlEquipLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEquipLayout.createSequentialGroup()
                .addGroup(pnlEquipLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEquipLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txfEquip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblPWSL5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEquipLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPWSL6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txfTask, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEquipLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUnique, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txfUnique, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlName.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlName.setFocusable(false);
        pnlName.setRequestFocusEnabled(false);

        lblPWSL1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblPWSL1.setText("Employee ID:");
        lblPWSL1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblPWSL3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblPWSL3.setText("Customer:");
        lblPWSL3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        lblPWSL4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblPWSL4.setText("Off-site?:");
        lblPWSL4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        txfCust.setNextFocusableComponent(txfEquip);
        txfCust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfCustActionPerformed(evt);
            }
        });

        txfEmp.setNextFocusableComponent(txfCust);
        txfEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfEmpActionPerformed(evt);
            }
        });

        btgWork.add(rdOnSiteYes);
        rdOnSiteYes.setText("Yes");
        rdOnSiteYes.setNextFocusableComponent(rdOnSiteNo);
        rdOnSiteYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdOnSiteYesActionPerformed(evt);
            }
        });

        btgWork.add(rdOnSiteNo);
        rdOnSiteNo.setText("No");
        rdOnSiteNo.setNextFocusableComponent(txfEquip);
        rdOnSiteNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdOnSiteNoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlNameLayout = new javax.swing.GroupLayout(pnlName);
        pnlName.setLayout(pnlNameLayout);
        pnlNameLayout.setHorizontalGroup(
            pnlNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPWSL4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdOnSiteYes, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdOnSiteNo, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(243, 243, 243))
            .addGroup(pnlNameLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(lblPWSL1, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txfEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPWSL3, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txfCust, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8))
        );
        pnlNameLayout.setVerticalGroup(
            pnlNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlNameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPWSL1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txfEmp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPWSL3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txfCust, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPWSL4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdOnSiteYes)
                    .addComponent(rdOnSiteNo))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlCbn.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblPWSL16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPWSL16.setText("Pace of work?:");

        cbFrantic.setText("Frantic");
        cbFrantic.setNextFocusableComponent(cbFaster);
        cbFrantic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFranticActionPerformed(evt);
            }
        });

        cbEasy.setText("Easy");
        cbEasy.setNextFocusableComponent(cbSlow);
        cbEasy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbEasyActionPerformed(evt);
            }
        });

        cbFaster.setText("Faster");
        cbFaster.setNextFocusableComponent(cbNormal);
        cbFaster.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFasterActionPerformed(evt);
            }
        });

        cbNormal.setText("Normal");
        cbNormal.setNextFocusableComponent(cbEasy);
        cbNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbNormalActionPerformed(evt);
            }
        });

        cbSlow.setText("Slow");
        cbSlow.setNextFocusableComponent(btnSubmit);
        cbSlow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSlowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlCbnLayout = new javax.swing.GroupLayout(pnlCbn);
        pnlCbn.setLayout(pnlCbnLayout);
        pnlCbnLayout.setHorizontalGroup(
            pnlCbnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCbnLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCbnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCbnLayout.createSequentialGroup()
                        .addComponent(lblPWSL16, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(cbNormal))
                    .addGroup(pnlCbnLayout.createSequentialGroup()
                        .addGroup(pnlCbnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbEasy)
                            .addComponent(cbFrantic))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCbnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbSlow)
                            .addComponent(cbFaster))))
                .addGap(0, 27, Short.MAX_VALUE))
        );
        pnlCbnLayout.setVerticalGroup(
            pnlCbnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCbnLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(pnlCbnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPWSL16, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbNormal))
                .addGap(0, 0, 0)
                .addGroup(pnlCbnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbFrantic)
                    .addComponent(cbFaster))
                .addGap(0, 0, 0)
                .addGroup(pnlCbnLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbSlow)
                    .addComponent(cbEasy, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        btnSchedule.setText("Schedule");
        btnSchedule.setNextFocusableComponent(txfEmp);
        btnSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScheduleActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.setNextFocusableComponent(txfEmp);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnSubmit.setText("Run");
        btnSubmit.setNextFocusableComponent(txfEmp);
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Repeat:");

        txfRepeat.setText("0");
        txfRepeat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfRepeatActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("times");

        btnSchedule1.setText("Queue");
        btnSchedule1.setNextFocusableComponent(txfEmp);
        btnSchedule1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSchedule1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlRunLayout = new javax.swing.GroupLayout(pnlRun);
        pnlRun.setLayout(pnlRunLayout);
        pnlRunLayout.setHorizontalGroup(
            pnlRunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRunLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txfRepeat, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSchedule)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSchedule1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSubmit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlRunLayout.setVerticalGroup(
            pnlRunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlRunLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlRunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlRunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSchedule1)
                        .addComponent(btnSchedule)
                        .addComponent(btnSave)
                        .addComponent(btnSubmit))
                    .addGroup(pnlRunLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txfRepeat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlGPT.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblPWSL2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPWSL2.setText("Hazard mitigation strategy:");

        txaHazard.setColumns(20);
        txaHazard.setLineWrap(true);
        txaHazard.setRows(5);
        txaHazard.setWrapStyleWord(true);
        spHazard.setViewportView(txaHazard);

        btnSuggestion.setText("Suggestion");
        btnSuggestion.setNextFocusableComponent(btnClear);
        btnSuggestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuggestionActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.setNextFocusableComponent(txfTools);

        btnConfig.setText("Config");
        btnConfig.setNextFocusableComponent(btnSuggestion);
        btnConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfigActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlGPTLayout = new javax.swing.GroupLayout(pnlGPT);
        pnlGPT.setLayout(pnlGPTLayout);
        pnlGPTLayout.setHorizontalGroup(
            pnlGPTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGPTLayout.createSequentialGroup()
                .addComponent(lblPWSL2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(pnlGPTLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGPTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spHazard)
                    .addGroup(pnlGPTLayout.createSequentialGroup()
                        .addComponent(btnConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSuggestion, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClear)
                        .addGap(0, 41, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlGPTLayout.setVerticalGroup(
            pnlGPTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGPTLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPWSL2, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlGPTLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConfig)
                    .addComponent(btnSuggestion, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spHazard, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        txtInfo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        txtInfo.setText("Please fill out your PWSL, then select \"Run\" to complete your PWSL.");
        txtInfo.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        pnlTools.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txfNeeds.setText("No");
        txfNeeds.setNextFocusableComponent(txfUnique);

        lblPWSL10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblPWSL10.setText("Need anything?:");

        lblPWSL8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblPWSL8.setText("Tools:");

        txfTools.setText("No");
        txfTools.setNextFocusableComponent(txfNeeds);
        txfTools.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfToolsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlToolsLayout = new javax.swing.GroupLayout(pnlTools);
        pnlTools.setLayout(pnlToolsLayout);
        pnlToolsLayout.setHorizontalGroup(
            pnlToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlToolsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlToolsLayout.createSequentialGroup()
                        .addComponent(lblPWSL10, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txfNeeds))
                    .addGroup(pnlToolsLayout.createSequentialGroup()
                        .addComponent(lblPWSL8, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txfTools)))
                .addContainerGap())
        );
        pnlToolsLayout.setVerticalGroup(
            pnlToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlToolsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPWSL8, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txfTools, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPWSL10, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txfNeeds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );

        pnlPPE.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lblPWSL13.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblPWSL13.setText("Wearing PPE?:");

        lblPWSL14.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lblPWSL14.setText("Safety Plan?:");

        btgPPE.add(rbPPEYes);
        rbPPEYes.setText("Yes");
        rbPPEYes.setNextFocusableComponent(rbPPENo);
        rbPPEYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbPPEYesActionPerformed(evt);
            }
        });

        btgPPE.add(rbPPENo);
        rbPPENo.setText("No");
        rbPPENo.setNextFocusableComponent(rbSafetyYes);

        btgSafety.add(rbSafetyYes);
        rbSafetyYes.setText("Yes");
        rbSafetyYes.setNextFocusableComponent(rbSafetyNo);
        rbSafetyYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSafetyYesActionPerformed(evt);
            }
        });

        btgSafety.add(rbSafetyNo);
        rbSafetyNo.setText("No");
        rbSafetyNo.setNextFocusableComponent(cbExposed);

        javax.swing.GroupLayout pnlPPELayout = new javax.swing.GroupLayout(pnlPPE);
        pnlPPE.setLayout(pnlPPELayout);
        pnlPPELayout.setHorizontalGroup(
            pnlPPELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPPELayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPPELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPWSL14)
                    .addComponent(lblPWSL13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPPELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rbSafetyYes, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
                    .addComponent(rbPPEYes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPPELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSafetyNo, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbPPENo, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        pnlPPELayout.setVerticalGroup(
            pnlPPELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPPELayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPPELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPWSL13, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbPPEYes)
                    .addComponent(rbPPENo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlPPELayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPWSL14, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbSafetyYes)
                    .addComponent(rbSafetyNo))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlMoreHazards.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cbExposed.setText("Within 3ft of 50v+");
        cbExposed.setNextFocusableComponent(cbHotWork);
        cbExposed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbExposedActionPerformed(evt);
            }
        });

        cbHotWork.setText("Hot Work");
        cbHotWork.setNextFocusableComponent(cbSiemensLadder);
        cbHotWork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbHotWorkActionPerformed(evt);
            }
        });

        cbSiemensLadder.setText("Non-Siemens Ladder");
        cbSiemensLadder.setNextFocusableComponent(cbInLift);

        cbConfinedSpace.setText("Confined Space");
        cbConfinedSpace.setNextFocusableComponent(cbNone);

        cbInLift.setText("In a Lift");
        cbInLift.setNextFocusableComponent(cbConfinedSpace);
        cbInLift.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbInLiftActionPerformed(evt);
            }
        });

        cbNone.setText("None apply");
        cbNone.setNextFocusableComponent(cbFrantic);
        cbNone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbNoneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlMoreHazardsLayout = new javax.swing.GroupLayout(pnlMoreHazards);
        pnlMoreHazards.setLayout(pnlMoreHazardsLayout);
        pnlMoreHazardsLayout.setHorizontalGroup(
            pnlMoreHazardsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMoreHazardsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMoreHazardsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMoreHazardsLayout.createSequentialGroup()
                        .addComponent(cbConfinedSpace)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbInLift)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbNone))
                    .addGroup(pnlMoreHazardsLayout.createSequentialGroup()
                        .addComponent(cbExposed)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbHotWork)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbSiemensLadder)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlMoreHazardsLayout.setVerticalGroup(
            pnlMoreHazardsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMoreHazardsLayout.createSequentialGroup()
                .addGroup(pnlMoreHazardsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbExposed)
                    .addComponent(cbHotWork)
                    .addComponent(cbSiemensLadder))
                .addGap(5, 5, 5)
                .addGroup(pnlMoreHazardsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbConfinedSpace)
                    .addComponent(cbInLift)
                    .addComponent(cbNone))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        mnbPWSL.setToolTipText("PWSL Workbench");
        mnbPWSL.setFocusable(false);

        mnuFile.setText("File");

        mniLoad.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniLoad.setText("Load PWSL Inst.");
        mniLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniLoadActionPerformed(evt);
            }
        });
        mnuFile.add(mniLoad);

        mniSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        mniSave.setText("Save As...");
        mniSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSaveActionPerformed(evt);
            }
        });
        mnuFile.add(mniSave);

        mnbPWSL.add(mnuFile);

        mnuEdit.setText("Edit");
        mnbPWSL.add(mnuEdit);

        setJMenuBar(mnbPWSL);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlEquip, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlHazard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnlGPT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlTools, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(pnlRun, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlMoreHazards, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(pnlPPE, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnlCbn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(txtInfo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(pnlName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(pnlEquip, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlHazard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlGPT, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(pnlTools, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlPPE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlCbn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(pnlMoreHazards, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(pnlRun, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(txtInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnlMoreHazards.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rdOnSiteYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdOnSiteYesActionPerformed
        btnSave.setVisible(!rdOnSiteYes.isSelected());
    }//GEN-LAST:event_rdOnSiteYesActionPerformed

    private void txfEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfEmpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfEmpActionPerformed

    private void txfCustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfCustActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfCustActionPerformed

    private void cbInfectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbInfectionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbInfectionActionPerformed

    private void cbLightingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbLightingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbLightingActionPerformed

    private void cbHeavyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbHeavyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbHeavyActionPerformed

    private void cbRepeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRepeatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbRepeatActionPerformed

    private void cbNoiseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbNoiseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbNoiseActionPerformed

    private void cbNewSiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbNewSiteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbNewSiteActionPerformed

    private void cbPowerToolsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPowerToolsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbPowerToolsActionPerformed

    private void cbSlipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSlipActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbSlipActionPerformed

    private void cbTrenchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTrenchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbTrenchActionPerformed

    private void cbHotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbHotActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbHotActionPerformed

    private void cbColdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbColdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbColdActionPerformed

    private void cbStormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbStormActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbStormActionPerformed

    private void cbInsectsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbInsectsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbInsectsActionPerformed

    private void cbAloneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAloneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbAloneActionPerformed

    private void cbTripActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTripActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbTripActionPerformed

    private void txfToolsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfToolsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfToolsActionPerformed

    private void cbInLiftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbInLiftActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbInLiftActionPerformed

    private void cbNoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbNoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbNoneActionPerformed

    private void cbNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbNormalActionPerformed
        if (cbNormal.isSelected()) {
            cbFaster.setSelected(false);
            cbEasy.setSelected(false);
            cbSlow.setSelected(false);
            cbFrantic.setSelected(false);
        }
    }//GEN-LAST:event_cbNormalActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        PWSLData formData = new PWSLData();

        formData.setTxfCustValue(txfCust.getText());
        formData.setTxfEmpValue(txfEmp.getText());
        formData.setTxfEquipValue(txfEquip.getText());
        formData.setTxfTaskValue(txfTask.getText());
        formData.setTxaHazardValue(txaHazard.getText());
        formData.setRdOnSiteYesValue(rdOnSiteYes.isSelected());
        formData.setRdOnSiteNoValue(rdOnSiteNo.isSelected());

        formData.setCbConfinedValue(cbConfined.isSelected());
        formData.setCbCorrectionsValue(cbCorrections.isSelected());
        formData.setCbCutValue(cbCut.isSelected());
        formData.setCbDrivingValue(cbDriving.isSelected());
        formData.setCbDustValue(cbDust.isSelected());
        formData.setCbErgonomicsValue(cbErgonomics.isSelected());
        formData.setCbElectricalValue(cbElectrical.isSelected());
        formData.setCbEyeStrainValue(cbEyeStrain.isSelected());
        formData.setCbLiftsValue(cbLifts.isSelected());
        formData.setCbLaddersValue(cbLadders.isSelected());
        formData.setCbRoofsValue(cbRoofs.isSelected());
        formData.setCbFlyingValue(cbFlying.isSelected());
        formData.setCbMetalValue(cbMetal.isSelected());
        formData.setCbHandValue(cbHand.isSelected());
        formData.setCbHousekeepingValue(cbHousekeeping.isSelected());
        formData.setCbInfectionValue(cbInfection.isSelected());
        formData.setCbLightingValue(cbLighting.isSelected());
        formData.setCbHeavyValue(cbHeavy.isSelected());
        formData.setCbRepeatValue(cbRepeat.isSelected());
        formData.setCbNoiseValue(cbNoise.isSelected());
        formData.setCbNewSiteValue(cbNewSite.isSelected());
        formData.setCbPowerToolsValue(cbPowerTools.isSelected());
        formData.setCbSlipValue(cbSlip.isSelected());
        formData.setCbTrenchValue(cbTrench.isSelected());
        formData.setCbHotValue(cbHot.isSelected());
        formData.setCbColdValue(cbCold.isSelected());
        formData.setCbStormValue(cbStorm.isSelected());
        formData.setCbInsectsValue(cbInsects.isSelected());
        formData.setCbAloneValue(cbAlone.isSelected());
        formData.setCbTripValue(cbTrip.isSelected());

        formData.setTxfToolsValue(txfTools.getText());
        formData.setTxfNeedsValue(txfNeeds.getText());
        formData.setTxfUniqueValue(txfUnique.getText());
        formData.setTxfRepeatValue(txfRepeat.getText());
        formData.setRbPPENoValue(rbPPENo.isSelected());
        formData.setRbPPEYesValue(rbPPEYes.isSelected());
        formData.setRbSafetyNoValue(rbSafetyNo.isSelected());
        formData.setRbSafetyYesValue(rbSafetyYes.isSelected());

        formData.setCbExposedValue(cbExposed.isSelected());
        formData.setCbSiemensLadderValue(cbSiemensLadder.isSelected());
        formData.setCbHotWorkValue(cbHotWork.isSelected());
        formData.setCbInLiftValue(cbInLift.isSelected());
        formData.setCbConfinedSpaceValue(cbConfinedSpace.isSelected());
        formData.setCbNoneValue(cbNone.isSelected());
        formData.setCbFranticValue(cbFrantic.isSelected());
        formData.setCbEasyValue(cbEasy.isSelected());
        formData.setCbFasterValue(cbFaster.isSelected());
        formData.setCbNormalValue(cbNormal.isSelected());
        formData.setCbSlowValue(cbSlow.isSelected());

        WebPWSL.main(formData);
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void txfTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfTaskActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfTaskActionPerformed

    private void mniLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniLoadActionPerformed
        loadFromFile();
    }//GEN-LAST:event_mniLoadActionPerformed

    private void mniSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSaveActionPerformed
        saveToFile();
    }//GEN-LAST:event_mniSaveActionPerformed

    private void btnSuggestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuggestionActionPerformed
        generateSafetySuggestion(getWordCount());
    }//GEN-LAST:event_btnSuggestionActionPerformed

    private void cbConfinedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbConfinedActionPerformed

    }//GEN-LAST:event_cbConfinedActionPerformed

    private void btnConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfigActionPerformed
        HazardConfig hazardConfig = new HazardConfig(null, true);
        hazardConfig.setVisible(true);
    }//GEN-LAST:event_btnConfigActionPerformed

    private void txfRepeatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfRepeatActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfRepeatActionPerformed

    private void btnScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScheduleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnScheduleActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        saveToFile();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void rdOnSiteNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdOnSiteNoActionPerformed
        btnSave.setVisible(rdOnSiteNo.isSelected());
    }//GEN-LAST:event_rdOnSiteNoActionPerformed

    private void cbHotWorkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbHotWorkActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbHotWorkActionPerformed

    private void btnSchedule1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSchedule1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSchedule1ActionPerformed

    private void cbExposedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbExposedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbExposedActionPerformed

    private void cbFranticActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFranticActionPerformed
        if (cbFrantic.isSelected()) {
            cbFaster.setSelected(false);
            cbEasy.setSelected(false);
            cbSlow.setSelected(false);
            cbNormal.setSelected(false);
        }
    }//GEN-LAST:event_cbFranticActionPerformed

    private void cbFasterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFasterActionPerformed
        if (cbFaster.isSelected()) {
            cbFrantic.setSelected(false);
            cbEasy.setSelected(false);
            cbSlow.setSelected(false);
            cbNormal.setSelected(false);
        }
    }//GEN-LAST:event_cbFasterActionPerformed

    private void cbEasyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbEasyActionPerformed
        if (cbEasy.isSelected()) {
            cbFaster.setSelected(false);
            cbFrantic.setSelected(false);
            cbSlow.setSelected(false);
            cbNormal.setSelected(false);
        }
    }//GEN-LAST:event_cbEasyActionPerformed

    private void cbSlowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSlowActionPerformed
        if (cbSlow.isSelected()) {
            cbFaster.setSelected(false);
            cbEasy.setSelected(false);
            cbFrantic.setSelected(false);
            cbNormal.setSelected(false);
        }
    }//GEN-LAST:event_cbSlowActionPerformed

    private void rbSafetyYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSafetyYesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSafetyYesActionPerformed

    private void rbPPEYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbPPEYesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbPPEYesActionPerformed

    /**
     * @param args the command line arguments
     */
    private void saveToFile() {
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("XML files", "xml");
        fileChooser.setCurrentDirectory(new File(DEFAULT_SAVE_FOLDER)); // Set default folder
        fileChooser.setFileFilter(filter);

        int returnVal = fileChooser.showSaveDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            // Ensure the file has ".xml" extension
            if (!file.getName().toLowerCase().endsWith(".xml")) {
                file = new File(file.getParentFile(), file.getName() + ".xml");
            }
            try (PrintWriter writer = new PrintWriter(file)) {
                // Save text field data
                saveField(writer, "txfCust", txfCust.getText());
                saveField(writer, "txfEmp", txfEmp.getText());
                saveField(writer, "txfEquip", txfEquip.getText());
                saveField(writer, "txfTask", txfTask.getText());
                saveField(writer, "txfTools", txfTools.getText());
                saveField(writer, "txfNeeds", txfNeeds.getText());
                saveField(writer, "txfUnique", txfUnique.getText());
                // Save text area data
                saveField(writer, "txaHazard", txaHazard.getText());

                // Save radio button states
                saveField(writer, "rdOnSiteYes", String.valueOf(rdOnSiteYes.isSelected()));
                saveField(writer, "rdOnSiteNo", String.valueOf(rdOnSiteNo.isSelected()));
                saveField(writer, "rbSafetyYes", String.valueOf(rbSafetyYes.isSelected()));
                saveField(writer, "rbSafetyNo", String.valueOf(rbSafetyNo.isSelected()));
                saveField(writer, "rbPPEYes", String.valueOf(rbPPEYes.isSelected()));
                saveField(writer, "rbPPENo", String.valueOf(rbPPENo.isSelected()));

                // Save checkbox states
                saveField(writer, "cbConfined", String.valueOf(cbConfined.isSelected()));
                saveField(writer, "cbCorrections", String.valueOf(cbCorrections.isSelected()));
                saveField(writer, "cbCut", String.valueOf(cbCut.isSelected()));
                saveField(writer, "cbDriving", String.valueOf(cbDriving.isSelected()));
                saveField(writer, "cbDust", String.valueOf(cbDust.isSelected()));
                saveField(writer, "cbErgonomics", String.valueOf(cbErgonomics.isSelected()));
                saveField(writer, "cbElectrical", String.valueOf(cbElectrical.isSelected()));
                saveField(writer, "cbEyeStrain", String.valueOf(cbEyeStrain.isSelected()));
                saveField(writer, "cbLifts", String.valueOf(cbLifts.isSelected()));
                saveField(writer, "cbLadders", String.valueOf(cbLadders.isSelected()));
                saveField(writer, "cbRoofs", String.valueOf(cbRoofs.isSelected()));
                saveField(writer, "cbFlying", String.valueOf(cbFlying.isSelected()));
                saveField(writer, "cbMetal", String.valueOf(cbMetal.isSelected()));
                saveField(writer, "cbHand", String.valueOf(cbHand.isSelected()));
                saveField(writer, "cbHousekeeping", String.valueOf(cbHousekeeping.isSelected()));
                saveField(writer, "cbInfection", String.valueOf(cbInfection.isSelected()));
                saveField(writer, "cbLighting", String.valueOf(cbLighting.isSelected()));
                saveField(writer, "cbHeavy", String.valueOf(cbHeavy.isSelected()));
                saveField(writer, "cbRepeat", String.valueOf(cbRepeat.isSelected()));
                saveField(writer, "cbNoise", String.valueOf(cbNoise.isSelected()));
                saveField(writer, "cbNewSite", String.valueOf(cbNewSite.isSelected()));
                saveField(writer, "cbPowerTools", String.valueOf(cbPowerTools.isSelected()));
                saveField(writer, "cbSlip", String.valueOf(cbSlip.isSelected()));
                saveField(writer, "cbTrench", String.valueOf(cbTrench.isSelected()));
                saveField(writer, "cbHot", String.valueOf(cbHot.isSelected()));
                saveField(writer, "cbCold", String.valueOf(cbCold.isSelected()));
                saveField(writer, "cbStorm", String.valueOf(cbStorm.isSelected()));
                saveField(writer, "cbInsects", String.valueOf(cbInsects.isSelected()));
                saveField(writer, "cbAlone", String.valueOf(cbAlone.isSelected()));
                saveField(writer, "cbTrip", String.valueOf(cbTrip.isSelected()));
                saveField(writer, "cbExposed", String.valueOf(cbExposed.isSelected()));
                saveField(writer, "cbSiemensLadder", String.valueOf(cbSiemensLadder.isSelected()));
                saveField(writer, "cbHotWork", String.valueOf(cbHotWork.isSelected()));
                saveField(writer, "cbInLift", String.valueOf(cbInLift.isSelected()));
                saveField(writer, "cbConfinedSpace", String.valueOf(cbConfinedSpace.isSelected()));
                saveField(writer, "cbNone", String.valueOf(cbNone.isSelected()));
                saveField(writer, "cbFrantic", String.valueOf(cbFrantic.isSelected()));
                saveField(writer, "cbNormal", String.valueOf(cbNormal.isSelected()));
                saveField(writer, "cbSlow", String.valueOf(cbSlow.isSelected()));
                saveField(writer, "cbEasy", String.valueOf(cbEasy.isSelected()));
                saveField(writer, "cbFaster", String.valueOf(cbFaster.isSelected()));

                JOptionPane.showMessageDialog(this, "Data saved successfully!");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error saving data", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void saveField(PrintWriter writer, String fieldName, String value) {
        writer.println("<" + fieldName + ">" + value + "</" + fieldName + ">");
    }

    private void loadFromFile() {
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("XML files", "xml");
        fileChooser.setCurrentDirectory(new File(DEFAULT_SAVE_FOLDER)); // Set default folder
        fileChooser.setFileFilter(filter);

        int returnVal = fileChooser.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                // Load text field data
                txfCust.setText(loadField(reader, "txfCust"));
                txfEmp.setText(loadField(reader, "txfEmp"));
                txfEquip.setText(loadField(reader, "txfEquip"));
                txfTask.setText(loadField(reader, "txfTask"));
                txfTools.setText(loadField(reader, "txfTools"));
                txfNeeds.setText(loadField(reader, "txfNeeds"));
                txfUnique.setText(loadField(reader, "txfUnique"));

                // Load text area data
                txaHazard.setText(loadField(reader, "txaHazard"));
                // Load radio button states
                rdOnSiteYes.setSelected(Boolean.parseBoolean(loadField(reader, "rdOnSiteYes")));
                rdOnSiteNo.setSelected(Boolean.parseBoolean(loadField(reader, "rdOnSiteNo")));
                rbSafetyYes.setSelected(Boolean.parseBoolean(loadField(reader, "rbSafetyYes")));
                rbSafetyNo.setSelected(Boolean.parseBoolean(loadField(reader, "rbSafetyNo")));
                rbPPEYes.setSelected(Boolean.parseBoolean(loadField(reader, "rbPPEYes")));
                rbPPENo.setSelected(Boolean.parseBoolean(loadField(reader, "rbPPENo")));

                // Load checkbox states
                cbConfined.setSelected(Boolean.parseBoolean(loadField(reader, "cbConfined")));
                cbCorrections.setSelected(Boolean.parseBoolean(loadField(reader, "cbCorrections")));
                cbCut.setSelected(Boolean.parseBoolean(loadField(reader, "cbCut")));
                cbDriving.setSelected(Boolean.parseBoolean(loadField(reader, "cbDriving")));
                cbDust.setSelected(Boolean.parseBoolean(loadField(reader, "cbDust")));
                cbErgonomics.setSelected(Boolean.parseBoolean(loadField(reader, "cbErgonomics")));
                cbElectrical.setSelected(Boolean.parseBoolean(loadField(reader, "cbElectrical")));
                cbEyeStrain.setSelected(Boolean.parseBoolean(loadField(reader, "cbEyeStrain")));
                cbLifts.setSelected(Boolean.parseBoolean(loadField(reader, "cbLifts")));
                cbLadders.setSelected(Boolean.parseBoolean(loadField(reader, "cbLadders")));
                cbRoofs.setSelected(Boolean.parseBoolean(loadField(reader, "cbRoofs")));
                cbFlying.setSelected(Boolean.parseBoolean(loadField(reader, "cbFlying")));
                cbMetal.setSelected(Boolean.parseBoolean(loadField(reader, "cbMetal")));
                cbHand.setSelected(Boolean.parseBoolean(loadField(reader, "cbHand")));
                cbHousekeeping.setSelected(Boolean.parseBoolean(loadField(reader, "cbHousekeeping")));
                cbInfection.setSelected(Boolean.parseBoolean(loadField(reader, "cbInfection")));
                cbLighting.setSelected(Boolean.parseBoolean(loadField(reader, "cbLighting")));
                cbHeavy.setSelected(Boolean.parseBoolean(loadField(reader, "cbHeavy")));
                cbRepeat.setSelected(Boolean.parseBoolean(loadField(reader, "cbRepeat")));
                cbNoise.setSelected(Boolean.parseBoolean(loadField(reader, "cbNoise")));
                cbNewSite.setSelected(Boolean.parseBoolean(loadField(reader, "cbNewSite")));
                cbPowerTools.setSelected(Boolean.parseBoolean(loadField(reader, "cbPowerTools")));
                cbSlip.setSelected(Boolean.parseBoolean(loadField(reader, "cbSlip")));
                cbTrench.setSelected(Boolean.parseBoolean(loadField(reader, "cbTrench")));
                cbHot.setSelected(Boolean.parseBoolean(loadField(reader, "cbHot")));
                cbCold.setSelected(Boolean.parseBoolean(loadField(reader, "cbCold")));
                cbStorm.setSelected(Boolean.parseBoolean(loadField(reader, "cbStorm")));
                cbInsects.setSelected(Boolean.parseBoolean(loadField(reader, "cbInsects")));
                cbAlone.setSelected(Boolean.parseBoolean(loadField(reader, "cbAlone")));
                cbTrip.setSelected(Boolean.parseBoolean(loadField(reader, "cbTrip")));
                cbExposed.setSelected(Boolean.parseBoolean(loadField(reader, "cbExposed")));
                cbSiemensLadder.setSelected(Boolean.parseBoolean(loadField(reader, "cbSiemensLadder")));
                cbHotWork.setSelected(Boolean.parseBoolean(loadField(reader, "cbHotWork")));
                cbInLift.setSelected(Boolean.parseBoolean(loadField(reader, "cbInLift")));
                cbConfinedSpace.setSelected(Boolean.parseBoolean(loadField(reader, "cbConfinedSpace")));
                cbNone.setSelected(Boolean.parseBoolean(loadField(reader, "cbNone")));
                cbFrantic.setSelected(Boolean.parseBoolean(loadField(reader, "cbFrantic")));
                cbNormal.setSelected(Boolean.parseBoolean(loadField(reader, "cbNormal")));
                cbSlow.setSelected(Boolean.parseBoolean(loadField(reader, "cbSlow")));
                cbEasy.setSelected(Boolean.parseBoolean(loadField(reader, "cbEasy")));
                cbFaster.setSelected(Boolean.parseBoolean(loadField(reader, "cbFaster")));

                JOptionPane.showMessageDialog(this, "Data loaded successfully!");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error loading data", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private String loadField(BufferedReader reader, String fieldName) throws IOException {
        String line;
        while ((line = reader.readLine()) != null) {
            if (line.contains("<" + fieldName + ">")) {
                return line.replaceAll("<" + fieldName + ">", "").replaceAll("</" + fieldName + ">", "");
            }
        }
        return "";
    }

        public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            System.out.println("Creating and showing the form...");
            PWSL form = new PWSL();
            form.setVisible(true);
            System.out.println("Form is visible.");
            form.loadWordCount();
            System.out.println("Wordcount loaded.");
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgPPE;
    private javax.swing.ButtonGroup btgSafety;
    private javax.swing.ButtonGroup btgWork;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnConfig;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSchedule;
    private javax.swing.JButton btnSchedule1;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton btnSuggestion;
    private javax.swing.JCheckBox cbAlone;
    private javax.swing.JCheckBox cbCold;
    private javax.swing.JCheckBox cbConfined;
    private javax.swing.JCheckBox cbConfinedSpace;
    private javax.swing.JCheckBox cbCorrections;
    private javax.swing.JCheckBox cbCut;
    private javax.swing.JCheckBox cbDriving;
    private javax.swing.JCheckBox cbDust;
    private javax.swing.JCheckBox cbEasy;
    private javax.swing.JCheckBox cbElectrical;
    private javax.swing.JCheckBox cbErgonomics;
    private javax.swing.JCheckBox cbExposed;
    private javax.swing.JCheckBox cbEyeStrain;
    private javax.swing.JCheckBox cbFaster;
    private javax.swing.JCheckBox cbFlying;
    private javax.swing.JCheckBox cbFrantic;
    private javax.swing.JCheckBox cbHand;
    private javax.swing.JCheckBox cbHeavy;
    private javax.swing.JCheckBox cbHot;
    private javax.swing.JCheckBox cbHotWork;
    private javax.swing.JCheckBox cbHousekeeping;
    private javax.swing.JCheckBox cbInLift;
    private javax.swing.JCheckBox cbInfection;
    private javax.swing.JCheckBox cbInsects;
    private javax.swing.JCheckBox cbLadders;
    private javax.swing.JCheckBox cbLifts;
    private javax.swing.JCheckBox cbLighting;
    private javax.swing.JCheckBox cbMetal;
    private javax.swing.JCheckBox cbNewSite;
    private javax.swing.JCheckBox cbNoise;
    private javax.swing.JCheckBox cbNone;
    private javax.swing.JCheckBox cbNormal;
    private javax.swing.JCheckBox cbPowerTools;
    private javax.swing.JCheckBox cbRepeat;
    private javax.swing.JCheckBox cbRoofs;
    private javax.swing.JCheckBox cbSiemensLadder;
    private javax.swing.JCheckBox cbSlip;
    private javax.swing.JCheckBox cbSlow;
    private javax.swing.JCheckBox cbStorm;
    private javax.swing.JCheckBox cbTrench;
    private javax.swing.JCheckBox cbTrip;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPWSL1;
    private javax.swing.JLabel lblPWSL10;
    private javax.swing.JLabel lblPWSL13;
    private javax.swing.JLabel lblPWSL14;
    private javax.swing.JLabel lblPWSL16;
    private javax.swing.JLabel lblPWSL2;
    private javax.swing.JLabel lblPWSL3;
    private javax.swing.JLabel lblPWSL4;
    private javax.swing.JLabel lblPWSL5;
    private javax.swing.JLabel lblPWSL6;
    private javax.swing.JLabel lblPWSL7;
    private javax.swing.JLabel lblPWSL8;
    private javax.swing.JLabel lblUnique;
    private javax.swing.JMenuBar mnbPWSL;
    private javax.swing.JMenuItem mniLoad;
    private javax.swing.JMenuItem mniSave;
    private javax.swing.JMenu mnuEdit;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JPanel pnlCbn;
    private javax.swing.JPanel pnlEquip;
    private javax.swing.JPanel pnlGPT;
    private javax.swing.JPanel pnlHazard;
    private javax.swing.JPanel pnlMoreHazards;
    private javax.swing.JPanel pnlName;
    private javax.swing.JPanel pnlPPE;
    private javax.swing.JPanel pnlRun;
    private javax.swing.JPanel pnlTools;
    private javax.swing.JRadioButton rbPPENo;
    private javax.swing.JRadioButton rbPPEYes;
    private javax.swing.JRadioButton rbSafetyNo;
    private javax.swing.JRadioButton rbSafetyYes;
    private javax.swing.JRadioButton rdOnSiteNo;
    private javax.swing.JRadioButton rdOnSiteYes;
    private javax.swing.JScrollPane spHazard;
    public javax.swing.JTextArea txaHazard;
    private javax.swing.JTextField txfCust;
    private javax.swing.JTextField txfEmp;
    private javax.swing.JTextField txfEquip;
    private javax.swing.JTextField txfNeeds;
    private javax.swing.JTextField txfRepeat;
    private javax.swing.JTextField txfTask;
    private javax.swing.JTextField txfTools;
    private javax.swing.JTextField txfUnique;
    private javax.swing.JLabel txtInfo;
    // End of variables declaration//GEN-END:variables

    private void generateSafetySuggestion(String wordCount) {

        String query = " words, how can I be safer on the job with the following hazards:";

        boolean atLeastOneChecked = false;

        List<String> checkedHazards = new ArrayList<>();

        // Check each checkbox and add its text to the list if checked
        if (cbConfined.isSelected()) {
            checkedHazards.add(cbConfined.getText());
            atLeastOneChecked = true;
        }

        if (cbCorrections.isSelected()) {
            checkedHazards.add(cbCorrections.getText());
            atLeastOneChecked = true;
        }

        if (cbCut.isSelected()) {
            checkedHazards.add(cbCut.getText());
            atLeastOneChecked = true;
        }

        if (cbDriving.isSelected()) {
            checkedHazards.add(cbDriving.getText());
            atLeastOneChecked = true;
        }

        if (cbDust.isSelected()) {
            checkedHazards.add(cbDust.getText());
            atLeastOneChecked = true;
        }

        if (cbErgonomics.isSelected()) {
            checkedHazards.add(cbErgonomics.getText());
            atLeastOneChecked = true;
        }

        if (cbElectrical.isSelected()) {
            checkedHazards.add(cbElectrical.getText());
            atLeastOneChecked = true;
        }

        if (cbEyeStrain.isSelected()) {
            checkedHazards.add(cbEyeStrain.getText());
            atLeastOneChecked = true;
        }

        if (cbLifts.isSelected()) {
            checkedHazards.add(cbLifts.getText());
            atLeastOneChecked = true;
        }

        if (cbLadders.isSelected()) {
            checkedHazards.add(cbLadders.getText());
            atLeastOneChecked = true;
        }

        if (cbRoofs.isSelected()) {
            checkedHazards.add(cbRoofs.getText());
            atLeastOneChecked = true;
        }

        if (cbFlying.isSelected()) {
            checkedHazards.add(cbFlying.getText());
            atLeastOneChecked = true;
        }

        if (cbMetal.isSelected()) {
            checkedHazards.add(cbMetal.getText());
            atLeastOneChecked = true;
        }

        if (cbHand.isSelected()) {
            checkedHazards.add(cbHand.getText());
            atLeastOneChecked = true;
        }

        if (cbHousekeeping.isSelected()) {
            checkedHazards.add(cbHousekeeping.getText());
            atLeastOneChecked = true;
        }

        if (cbInfection.isSelected()) {
            checkedHazards.add(cbInfection.getText());
            atLeastOneChecked = true;
        }

        if (cbLighting.isSelected()) {
            checkedHazards.add(cbLighting.getText());
            atLeastOneChecked = true;
        }

        if (cbHeavy.isSelected()) {
            checkedHazards.add(cbHeavy.getText());
            atLeastOneChecked = true;
        }

        if (cbRepeat.isSelected()) {
            checkedHazards.add(cbRepeat.getText());
            atLeastOneChecked = true;
        }

        if (cbNoise.isSelected()) {
            checkedHazards.add(cbNoise.getText());
            atLeastOneChecked = true;
        }

        if (cbNewSite.isSelected()) {
            checkedHazards.add(cbNewSite.getText());
            atLeastOneChecked = true;
        }

        if (cbPowerTools.isSelected()) {
            checkedHazards.add(cbPowerTools.getText());
            atLeastOneChecked = true;
        }

        if (cbSlip.isSelected()) {
            checkedHazards.add(cbSlip.getText());
            atLeastOneChecked = true;
        }

        if (cbTrench.isSelected()) {
            checkedHazards.add(cbTrench.getText());
            atLeastOneChecked = true;
        }

        if (cbHot.isSelected()) {
            checkedHazards.add(cbHot.getText());
            atLeastOneChecked = true;
        }

        if (cbCold.isSelected()) {
            checkedHazards.add(cbCold.getText());
            atLeastOneChecked = true;
        }

        if (cbStorm.isSelected()) {
            checkedHazards.add(cbStorm.getText());
            atLeastOneChecked = true;
        }

        if (cbInsects.isSelected()) {
            checkedHazards.add(cbInsects.getText());
            atLeastOneChecked = true;
        }

        if (cbAlone.isSelected()) {
            checkedHazards.add(cbAlone.getText());
            atLeastOneChecked = true;
        }

        if (cbTrip.isSelected()) {
            checkedHazards.add(cbTrip.getText());
            atLeastOneChecked = true;
        }

        //ChatGPT interaction class
        System.out.println("Generating a suggestion that is no more than  " + wordCount + "words long");

        String inputPrompt = "Chat GPT, in exactly " + wordCount + query
                + (atLeastOneChecked ? " " : " (none)")
                + String.join(", ", checkedHazards);
        System.out.println(inputPrompt);
        ChatGPTClient.askChatGPT(inputPrompt, txaHazard);

        // Handle the response as needed
        //System.out.println("ChatGPT response: " + response);
    }
    public void loadPWSLByName(String pwslName) {
    File pwslFile = new File(DEFAULT_SAVE_FOLDER, pwslName + ".xml");
    if (pwslFile.exists()) {
        try (BufferedReader reader = new BufferedReader(new FileReader(pwslFile))) {
            // Load text field data
            txfCust.setText(loadField(reader, "txfCust"));
            txfEmp.setText(loadField(reader, "txfEmp"));
            txfEquip.setText(loadField(reader, "txfEquip"));
            txfTask.setText(loadField(reader, "txfTask"));
            txfTools.setText(loadField(reader, "txfTools"));
            txfNeeds.setText(loadField(reader, "txfNeeds"));
            txfUnique.setText(loadField(reader, "txfUnique"));

            // Load text area data
            txaHazard.setText(loadField(reader, "txaHazard"));
            // Load radio button states
            rdOnSiteYes.setSelected(Boolean.parseBoolean(loadField(reader, "rdOnSiteYes")));
            rdOnSiteNo.setSelected(Boolean.parseBoolean(loadField(reader, "rdOnSiteNo")));
            rbSafetyYes.setSelected(Boolean.parseBoolean(loadField(reader, "rbSafetyYes")));
            rbSafetyNo.setSelected(Boolean.parseBoolean(loadField(reader, "rbSafetyNo")));
            rbPPEYes.setSelected(Boolean.parseBoolean(loadField(reader, "rbPPEYes")));
            rbPPENo.setSelected(Boolean.parseBoolean(loadField(reader, "rbPPENo")));

            // Load checkbox states
            cbConfined.setSelected(Boolean.parseBoolean(loadField(reader, "cbConfined")));
            cbCorrections.setSelected(Boolean.parseBoolean(loadField(reader, "cbCorrections")));
            cbCut.setSelected(Boolean.parseBoolean(loadField(reader, "cbCut")));
            cbDriving.setSelected(Boolean.parseBoolean(loadField(reader, "cbDriving")));
            cbDust.setSelected(Boolean.parseBoolean(loadField(reader, "cbDust")));
            cbErgonomics.setSelected(Boolean.parseBoolean(loadField(reader, "cbErgonomics")));
            cbElectrical.setSelected(Boolean.parseBoolean(loadField(reader, "cbElectrical")));
            cbEyeStrain.setSelected(Boolean.parseBoolean(loadField(reader, "cbEyeStrain")));
            cbLifts.setSelected(Boolean.parseBoolean(loadField(reader, "cbLifts")));
            cbLadders.setSelected(Boolean.parseBoolean(loadField(reader, "cbLadders")));
            cbRoofs.setSelected(Boolean.parseBoolean(loadField(reader, "cbRoofs")));
            cbFlying.setSelected(Boolean.parseBoolean(loadField(reader, "cbFlying")));
            cbMetal.setSelected(Boolean.parseBoolean(loadField(reader, "cbMetal")));
            cbHand.setSelected(Boolean.parseBoolean(loadField(reader, "cbHand")));
            cbHousekeeping.setSelected(Boolean.parseBoolean(loadField(reader, "cbHousekeeping")));
            cbInfection.setSelected(Boolean.parseBoolean(loadField(reader, "cbInfection")));
            cbLighting.setSelected(Boolean.parseBoolean(loadField(reader, "cbLighting")));
            cbHeavy.setSelected(Boolean.parseBoolean(loadField(reader, "cbHeavy")));
            cbRepeat.setSelected(Boolean.parseBoolean(loadField(reader, "cbRepeat")));
            cbNoise.setSelected(Boolean.parseBoolean(loadField(reader, "cbNoise")));
            cbNewSite.setSelected(Boolean.parseBoolean(loadField(reader, "cbNewSite")));
            cbPowerTools.setSelected(Boolean.parseBoolean(loadField(reader, "cbPowerTools")));
            cbSlip.setSelected(Boolean.parseBoolean(loadField(reader, "cbSlip")));
            cbTrench.setSelected(Boolean.parseBoolean(loadField(reader, "cbTrench")));
            cbHot.setSelected(Boolean.parseBoolean(loadField(reader, "cbHot")));
            cbCold.setSelected(Boolean.parseBoolean(loadField(reader, "cbCold")));
            cbStorm.setSelected(Boolean.parseBoolean(loadField(reader, "cbStorm")));
            cbInsects.setSelected(Boolean.parseBoolean(loadField(reader, "cbInsects")));
            cbAlone.setSelected(Boolean.parseBoolean(loadField(reader, "cbAlone")));
            cbTrip.setSelected(Boolean.parseBoolean(loadField(reader, "cbTrip")));
            cbExposed.setSelected(Boolean.parseBoolean(loadField(reader, "cbExposed")));
            cbSiemensLadder.setSelected(Boolean.parseBoolean(loadField(reader, "cbSiemensLadder")));
            cbHotWork.setSelected(Boolean.parseBoolean(loadField(reader, "cbHotWork")));
            cbInLift.setSelected(Boolean.parseBoolean(loadField(reader, "cbInLift")));
            cbConfinedSpace.setSelected(Boolean.parseBoolean(loadField(reader, "cbConfinedSpace")));
            cbNone.setSelected(Boolean.parseBoolean(loadField(reader, "cbNone")));
            cbFrantic.setSelected(Boolean.parseBoolean(loadField(reader, "cbFrantic")));
            cbNormal.setSelected(Boolean.parseBoolean(loadField(reader, "cbNormal")));
            cbSlow.setSelected(Boolean.parseBoolean(loadField(reader, "cbSlow")));
            cbEasy.setSelected(Boolean.parseBoolean(loadField(reader, "cbEasy")));
            cbFaster.setSelected(Boolean.parseBoolean(loadField(reader, "cbFaster")));

            JOptionPane.showMessageDialog(this, "PWSL loaded successfully!");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error loading PWSL data", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "PWSL file does not exist", "Error", JOptionPane.ERROR_MESSAGE);
    }
    
}
     public void runPWSLByName(String pwslName) {
    File pwslFile = new File(DEFAULT_SAVE_FOLDER, pwslName + ".xml");
    if (pwslFile.exists()) {
        try (BufferedReader reader = new BufferedReader(new FileReader(pwslFile))) {
            // Create a new PWSLData instance
            PWSLData formData = new PWSLData();

            // Load text field data
            formData.setTxfCustValue(loadField(reader, "txfCust"));
            formData.setTxfEmpValue(loadField(reader, "txfEmp"));
            formData.setTxfEquipValue(loadField(reader, "txfEquip"));
            formData.setTxfTaskValue(loadField(reader, "txfTask"));
            formData.setTxfToolsValue(loadField(reader, "txfTools"));
            formData.setTxfNeedsValue(loadField(reader, "txfNeeds"));
            formData.setTxfUniqueValue(loadField(reader, "txfUnique"));

            // Load text area data
            formData.setTxaHazardValue(loadField(reader, "txaHazard"));

            // Load radio button states
            formData.setRdOnSiteYesValue(Boolean.parseBoolean(loadField(reader, "rdOnSiteYes")));
            formData.setRdOnSiteNoValue(Boolean.parseBoolean(loadField(reader, "rdOnSiteNo")));
            formData.setRbSafetyYesValue(Boolean.parseBoolean(loadField(reader, "rbSafetyYes")));
            formData.setRbSafetyNoValue(Boolean.parseBoolean(loadField(reader, "rbSafetyNo")));
            formData.setRbPPEYesValue(Boolean.parseBoolean(loadField(reader, "rbPPEYes")));
            formData.setRbPPENoValue(Boolean.parseBoolean(loadField(reader, "rbPPENo")));

            // Load checkbox states
            formData.setCbConfinedValue(Boolean.parseBoolean(loadField(reader, "cbConfined")));
            formData.setCbCorrectionsValue(Boolean.parseBoolean(loadField(reader, "cbCorrections")));
            formData.setCbCutValue(Boolean.parseBoolean(loadField(reader, "cbCut")));
            formData.setCbDrivingValue(Boolean.parseBoolean(loadField(reader, "cbDriving")));
            formData.setCbDustValue(Boolean.parseBoolean(loadField(reader, "cbDust")));
            formData.setCbErgonomicsValue(Boolean.parseBoolean(loadField(reader, "cbErgonomics")));
            formData.setCbElectricalValue(Boolean.parseBoolean(loadField(reader, "cbElectrical")));
            formData.setCbEyeStrainValue(Boolean.parseBoolean(loadField(reader, "cbEyeStrain")));
            formData.setCbLiftsValue(Boolean.parseBoolean(loadField(reader, "cbLifts")));
            formData.setCbLaddersValue(Boolean.parseBoolean(loadField(reader, "cbLadders")));
            formData.setCbRoofsValue(Boolean.parseBoolean(loadField(reader, "cbRoofs")));
            formData.setCbFlyingValue(Boolean.parseBoolean(loadField(reader, "cbFlying")));
            formData.setCbMetalValue(Boolean.parseBoolean(loadField(reader, "cbMetal")));
            formData.setCbHandValue(Boolean.parseBoolean(loadField(reader, "cbHand")));
            formData.setCbHousekeepingValue(Boolean.parseBoolean(loadField(reader, "cbHousekeeping")));
            formData.setCbInfectionValue(Boolean.parseBoolean(loadField(reader, "cbInfection")));
            formData.setCbLightingValue(Boolean.parseBoolean(loadField(reader, "cbLighting")));
            formData.setCbHeavyValue(Boolean.parseBoolean(loadField(reader, "cbHeavy")));
            formData.setCbRepeatValue(Boolean.parseBoolean(loadField(reader, "cbRepeat")));
            formData.setCbNoiseValue(Boolean.parseBoolean(loadField(reader, "cbNoise")));
            formData.setCbNewSiteValue(Boolean.parseBoolean(loadField(reader, "cbNewSite")));
            formData.setCbPowerToolsValue(Boolean.parseBoolean(loadField(reader, "cbPowerTools")));
            formData.setCbSlipValue(Boolean.parseBoolean(loadField(reader, "cbSlip")));
            formData.setCbTrenchValue(Boolean.parseBoolean(loadField(reader, "cbTrench")));
            formData.setCbHotValue(Boolean.parseBoolean(loadField(reader, "cbHot")));
            formData.setCbColdValue(Boolean.parseBoolean(loadField(reader, "cbCold")));
            formData.setCbStormValue(Boolean.parseBoolean(loadField(reader, "cbStorm")));
            formData.setCbInsectsValue(Boolean.parseBoolean(loadField(reader, "cbInsects")));
            formData.setCbAloneValue(Boolean.parseBoolean(loadField(reader, "cbAlone")));
            formData.setCbTripValue(Boolean.parseBoolean(loadField(reader, "cbTrip")));
            formData.setCbExposedValue(Boolean.parseBoolean(loadField(reader, "cbExposed")));
            formData.setCbSiemensLadderValue(Boolean.parseBoolean(loadField(reader, "cbSiemensLadder")));
            formData.setCbHotWorkValue(Boolean.parseBoolean(loadField(reader, "cbHotWork")));
            formData.setCbInLiftValue(Boolean.parseBoolean(loadField(reader, "cbInLift")));
            formData.setCbConfinedSpaceValue(Boolean.parseBoolean(loadField(reader, "cbConfinedSpace")));
            formData.setCbNoneValue(Boolean.parseBoolean(loadField(reader, "cbNone")));
            formData.setCbFranticValue(Boolean.parseBoolean(loadField(reader, "cbFrantic")));
            formData.setCbNormalValue(Boolean.parseBoolean(loadField(reader, "cbNormal")));
            formData.setCbSlowValue(Boolean.parseBoolean(loadField(reader, "cbSlow")));
            formData.setCbEasyValue(Boolean.parseBoolean(loadField(reader, "cbEasy")));
            formData.setCbFasterValue(Boolean.parseBoolean(loadField(reader, "cbFaster")));

            // Pass the formData to WebPWSL and run it
            WebPWSL.main(formData);

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error loading PWSL data", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "PWSL file does not exist", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

// Helper method to load field data from the file
}

