/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package mysiexperience;

import java.awt.event.ActionEvent;
import javax.swing.JOptionPane;
import java.io.File;
import java.io.FileOutputStream;
import javax.xml.bind.Marshaller;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import mysiexperience.MyConfiguration;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.io.FileInputStream;
import java.io.StringReader;
import java.security.Key;
import java.util.Base64;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.BorderFactory;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
/**
 *
 * @author z004kptc
 */
public class HazardConfig extends javax.swing.JDialog {

     // Configuration file path
    private static final String CONFIG_FILE_PATH = System.getProperty("user.home") + File.separator +
            "Documents" + File.separator + "MySIExperience" + File.separator + "Configuration" + File.separator +
            "hazardconfiguration.xml";

    /**
     * Creates new form HazardConfig
     */
    public HazardConfig(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        loadConfiguration();
    }

 private void loadConfiguration() {
        try {
            File configFile = new File(CONFIG_FILE_PATH);
            if (!configFile.exists()) {
                System.out.println("Configuration file doesn't exist.");
                return;
            }

            // Use JAXB to unmarshal the XML data into MyConfiguration object
            JAXBContext context = JAXBContext.newInstance(MyConfiguration.class);
            Unmarshaller unmarshaller = context.createUnmarshaller();
            MyConfiguration configuration = (MyConfiguration) unmarshaller.unmarshal(configFile);

            // Set values in the corresponding fields
            pxfAPI.setText(configuration.getApiKey());
            txfModel.setText(configuration.getModel());
            txfEndPoint.setText(configuration.getEndPoint());
            txfWordCount.setText(String.valueOf(configuration.getWordCount()));
            txfMUser.setText(configuration.getMUser());
            pxfMPass.setText(configuration.getMPass());
            System.out.println("Configuration loaded successfully.");
        } catch (Exception ex) {
            ex.printStackTrace(); // Print full stack trace
            System.out.println("Error loading configuration: " + ex.getMessage());
            JOptionPane.showMessageDialog(this, "Error loading configuration: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void saveConfiguration(MyConfiguration configuration) {
        try {
            // Ensure the directory exists
            File configDirectory = new File(CONFIG_FILE_PATH).getParentFile();
            if (!configDirectory.exists()) {
                configDirectory.mkdirs();
            }

            // Use JAXB to marshal the MyConfiguration object to XML
            JAXBContext context = JAXBContext.newInstance(MyConfiguration.class);
            Marshaller marshaller = context.createMarshaller();
            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);

            // Write configuration data to file
            marshaller.marshal(configuration, new File(CONFIG_FILE_PATH));

            System.out.println("Configuration saved successfully to file: " + CONFIG_FILE_PATH);
        } catch (Exception ex) {
            ex.printStackTrace(); // Print full stack trace
            System.out.println("Error saving configuration: " + ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        pxfAPI = new javax.swing.JPasswordField();
        jLabel2 = new javax.swing.JLabel();
        txfModel = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txfEndPoint = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txfWordCount = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnHazardApply = new javax.swing.JButton();
        btnHazardCancel = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        pxfMPass = new javax.swing.JPasswordField();
        txfMUser = new javax.swing.JTextField();
        showKey = new javax.swing.JCheckBox();
        showPass = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Hazard Avoidance Suggestion Configuration");

        jLabel1.setText("API Key:");

        pxfAPI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pxfAPIActionPerformed(evt);
            }
        });

        jLabel2.setText("AI Model:");

        txfModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfModelActionPerformed(evt);
            }
        });

        jLabel3.setText("API Endpoint:");

        txfEndPoint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfEndPointActionPerformed(evt);
            }
        });

        jLabel4.setText("WordCount:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel6.setText("Not allowed to be greater than 50.");

        btnHazardApply.setText("Apply");
        btnHazardApply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHazardApplyActionPerformed(evt);
            }
        });

        btnHazardCancel.setText("Cancel");
        btnHazardCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHazardCancelActionPerformed(evt);
            }
        });

        jLabel8.setText("Msft User:");

        jLabel9.setText("Msft Pass:");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel10.setText("2FA may occasionally be invoked.");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel11.setText("Selenium web-cookies are saved to avoid multiple 2FA requests.");

        pxfMPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pxfMPassActionPerformed(evt);
            }
        });

        txfMUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfMUserActionPerformed(evt);
            }
        });

        showKey.setText("Show Key");
        showKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showKeyActionPerformed(evt);
            }
        });

        showPass.setText("Show Password");
        showPass.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPassActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txfEndPoint)
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnHazardApply)
                        .addGap(18, 18, 18)
                        .addComponent(btnHazardCancel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jSeparator1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txfWordCount, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txfMUser))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(pxfMPass, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(showPass, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(189, 189, 189)))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(showKey, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(pxfAPI)
                            .addComponent(txfModel))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(pxfAPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showKey)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txfModel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txfEndPoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txfWordCount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txfMUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(pxfMPass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showPass)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnHazardApply)
                    .addComponent(btnHazardCancel))
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pxfAPIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pxfAPIActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pxfAPIActionPerformed

    private void txfModelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfModelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfModelActionPerformed

    private void txfEndPointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfEndPointActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfEndPointActionPerformed

    private void btnHazardApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHazardApplyActionPerformed

   try {
        // Retrieve input values from GUI components
        String apiKey = new String(pxfAPI.getPassword());
        String model = txfModel.getText();
        String endPoint = txfEndPoint.getText();
        int wordCount = Integer.parseInt(txfWordCount.getText());
        String mUser = txfMUser.getText();
        String mPass = new String(pxfMPass.getPassword());
        // Create a MyConfiguration object
        MyConfiguration configuration = new MyConfiguration(apiKey, model, endPoint, wordCount, mUser, mPass);

        // Save the configuration to the specified XML file
        saveConfiguration(configuration);

        dispose(); //close HazardConfig.java
        JOptionPane.showMessageDialog(this, "Configuration saved successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
    } catch (NumberFormatException ex) {
        // Handle the case where wordCount is not a valid integer
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Word count must be a valid integer.", "Error", JOptionPane.ERROR_MESSAGE);
    } catch (Exception ex) {
        // Handle any other exceptions
        ex.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error saving configuration: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_btnHazardApplyActionPerformed

    private void pxfMPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pxfMPassActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pxfMPassActionPerformed

    private void txfMUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfMUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfMUserActionPerformed

    private void btnHazardCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHazardCancelActionPerformed
        dispose();
    }//GEN-LAST:event_btnHazardCancelActionPerformed

    private void showKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showKeyActionPerformed
    if (showKey.isSelected()) {
        // Show the characters in the password field
        pxfAPI.setEchoChar((char)0);
    } else {
        // Mask the characters in the password field with asterisks
        pxfAPI.setEchoChar('*');
    }

    }//GEN-LAST:event_showKeyActionPerformed

    private void showPassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showPassActionPerformed
            if (showPass.isSelected()) {
        // Show the characters in the password field
        pxfMPass.setEchoChar((char)0);
    } else {
        // Mask the characters in the password field with asterisks
        pxfMPass.setEchoChar('*');
    }

    }//GEN-LAST:event_showPassActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    // Create the HazardConfig dialog
    java.awt.EventQueue.invokeLater(() -> {
        HazardConfig dialog = new HazardConfig(new javax.swing.JFrame(), true);
        dialog.setVisible(true);
    });
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnHazardApply;
    private javax.swing.JButton btnHazardCancel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPasswordField pxfAPI;
    private javax.swing.JPasswordField pxfMPass;
    private javax.swing.JCheckBox showKey;
    private javax.swing.JCheckBox showPass;
    private javax.swing.JTextField txfEndPoint;
    private javax.swing.JTextField txfMUser;
    private javax.swing.JTextField txfModel;
    private javax.swing.JTextField txfWordCount;
    // End of variables declaration//GEN-END:variables
}
